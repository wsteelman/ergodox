#pragma once

#include "bsp.h"
#include <nrf_soc.h>
#include <ble_constants.h>

static uint8_t m_sample_key_press_scan_str[] = /**< Key pattern to be sent when the key press button has been pushed. */
{
    0x0b,                                      /* Key h */
    0x08,                                      /* Key e */
    0x0f,                                      /* Key l */
    0x0f,                                      /* Key l */
    0x12,                                      /* Key o */
    0x28                                       /* Key Return */
};

typedef void (*button_event_callback_t)(uint8_t data);
button_event_callback_t bsp_callbacks[BSP_EVENT_KEY_LAST] = {0};

static void register_button_callback(uint8_t event, button_event_callback_t func)
{
   if (event >= BSP_EVENT_KEY_LAST)
      return;
   bsp_callbacks[event] = func;
}

/**@brief Function for putting the chip into sleep mode.
 *
 * @note This function will not return.
 */
static void sleep_mode_enter(void)
{
    uint32_t err_code = bsp_indication_set(BSP_INDICATE_IDLE);

    APP_ERROR_CHECK(err_code);

    // Prepare wakeup buttons.
    err_code = bsp_btn_ble_sleep_mode_prepare();
    APP_ERROR_CHECK(err_code);

    // Go to system-off mode (this function will not return; wakeup will cause a reset).
    err_code = sd_power_system_off();
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for handling events from the BSP module.
 *
 * @param[in]   event   Event generated by button press.
 */
static void bsp_event_handler(bsp_event_t event)
{
    static uint8_t * p_key = m_sample_key_press_scan_str;
    static uint8_t   size  = 0;

    switch (event)
    {
        case BSP_EVENT_SLEEP:
            sleep_mode_enter();
            break;

        case BSP_EVENT_KEY_0:
            bsp_callbacks[event](*p_key);
            p_key++;
            size++;
            if (size == MAX_KEYS_IN_ONE_REPORT)
            {
                p_key = m_sample_key_press_scan_str;
                size  = 0;
            }
            break;

        default:
            bsp_callbacks[event](0);
            break;
    }
}

/** @brief   Function for checking if the Shift key is pressed.
 *
 *  @returns true if the SHIFT_BUTTON is pressed. false otherwise.
 */
static bool is_shift_key_pressed(void)
{
    bool     result;
    uint32_t err_code = bsp_button_is_pressed(SHIFT_BUTTON_ID, &result);

    APP_ERROR_CHECK(err_code);
    return result;
}

static void led_indication(bsp_indication_t i)
{
   uint32_t err_code;
   err_code = bsp_indication_set(i);
   APP_ERROR_CHECK(err_code);
}

/**@brief Function for initializing buttons and leds.
 *
 * @param[out] p_erase_bonds  Will be true if the clear bonding button was pressed to wake the application up.
 */
static void buttons_leds_init(bool * p_erase_bonds)
{
    bsp_event_t startup_event;

    uint32_t err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS,
                                 APP_TIMER_TICKS(100, APP_TIMER_PRESCALER),
                                 bsp_event_handler);

    APP_ERROR_CHECK(err_code);

    err_code = bsp_btn_ble_init(NULL, &startup_event);
    APP_ERROR_CHECK(err_code);

    *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);
}
